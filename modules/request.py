import disnake
import configparser
import sqlite3

from disnake.ext import commands
from disnake import TextInputStyle

config = configparser.ConfigParser()
config.read('./config.ini', encoding='utf-8')

class RequestForm(disnake.ui.Modal, commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        components = [
            disnake.ui.TextInput(
                label="–ù–∏–∫–Ω–µ–π–º",
                placeholder="Dream_Craft2013",
                custom_id="Nickname",
                style=TextInputStyle.short,
            ),
            disnake.ui.TextInput(
                label="–í–æ–∑—Ä–∞—Å—Ç",
                custom_id="age",
                style=TextInputStyle.short,
            ),
            disnake.ui.TextInput(
                label="–ß–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ?",
                placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á–µ–º –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è",
                custom_id="plans",
                style=TextInputStyle.paragraph,
            ),
            disnake.ui.TextInput(
                label="–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ?",
                custom_id="inviter",
                style=TextInputStyle.short,
            ),
        ]
        super().__init__(title="–ó–∞—è–≤–∫–∞", components=components)

    @commands.slash_command(
        name='form-create',
        description='–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏',
    )
    @commands.has_permissions(administrator=True)
    async def buttonsForm(self, inter: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(
            title="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É.",
            description="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å –Ω–∞ –Ω–∞—à–µ–º –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ!",
            colour=0xADFF2F,
        )
        await inter.channel.send(
            components=[
                disnake.ui.Button(label="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", style=disnake.ButtonStyle.green, custom_id="request",
                            emoji="ü™™"),
            ],
            embed=embed
        )
        await inter.send("–ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ —Å–æ–∑–¥–∞–Ω–∞", ephemeral=True)

    async def callback(self, inter):
        conn = sqlite3.connect('./database/request.db')
        c = conn.cursor()
        c.execute('SELECT * FROM requests WHERE user_id = ?', (inter.user.id,))
        ids = c.fetchall()
        if not ids:
            channel = self.bot.get_channel(int(config["Auth"]["channel_id"]))
            await inter.response.send_message(content="–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É!", ephemeral=True)
            requestEmbed = disnake.Embed(
                title="–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!",
                description=f"**–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {inter.user.global_name}**",
                color=disnake.Colour.red(),
            )
            requestEmbed.set_thumbnail(url=inter.user.display_avatar.url)
            for key, value in inter.text_values.items():
                requestEmbed.add_field(
                    name=replaceName(key),
                    value=value[:1024],
                    inline=False,
                )
            buff = await channel.send(embed=requestEmbed, components=[
                disnake.ui.Button(label="–ü—Ä–∏–Ω—è—Ç—å", style=disnake.ButtonStyle.green, custom_id="accept"),
                disnake.ui.Button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=disnake.ButtonStyle.danger, custom_id="reject"),
            ])
            requestEmbed_id = buff.id
            requestCallBackEmbed = disnake.Embed(
                title="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!",
                description="**–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ —É—Ö–æ–¥–∏—Ç –¥–æ 24-—Ö —á–∞—Å–æ–≤**",
                color=disnake.Colour.purple(),
            )
            requestCallBackEmbed.set_image(file=disnake.File(str(config["Pictures"]["msg_picture"])))
            await inter.user.send(embed=requestCallBackEmbed)
            await reg(inter, requestEmbed_id)
        elif ids:
            await reg(inter, None)

def replaceName(arg: str):
    if arg == "Nickname":
        return "–ù–∏–∫"
    elif arg == "age":
        return "–í–æ–∑—Ä–∞—Å—Ç"
    elif arg == "plans":
        return "–ü–ª–∞–Ω—ã"
    elif arg == "inviter":
        return "–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ?"

async def reg(inter: disnake.ModalInteraction, requestEmbed_id):
    conn = sqlite3.connect('./database/request.db')
    c = conn.cursor()
    c.execute('SELECT * FROM requests WHERE user_id = ?', (inter.user.id,))
    ids = c.fetchall()
    if ids:
        await inter.response.send_message("–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É!", ephemeral=True)
    elif not ids:
        connect = sqlite3.connect('./database/request.db')
        c = connect.cursor()
        c.execute("INSERT INTO requests (user_id, message_id, nickname, status) VALUES (?, ?, ?, ?)",
                      (inter.author.id, requestEmbed_id, inter.text_values['Nickname'], 'pending'))
        connect.commit()
        connect.close()

def setup(bot: commands.Bot):
    bot.add_cog(RequestForm(bot))
